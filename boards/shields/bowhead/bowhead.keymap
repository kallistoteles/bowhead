#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define DEF 0
#define SYM 1
#define NUM 2
#define NAV 3

/ {

behaviors {
  hr: homerow_mods {
    compatible = "zmk,behavior-hold-tap";
    tapping-term-ms = <150>;
    quick-tap-ms = <0>;
    flavor = "tap-preferred";
    bindings = <&kp>, <&kp>;
  };
};

macros {

	cut: cut {
	label = "cut"; compatible = "zmk,behavior-macro"; #binding-cells = <0>;
	bindings
		= <&macro_press &kp LCTRL>
		, <&macro_tap &kp X>
		, <&macro_release &kp LCTRL>
		;
	};

	copy: copy {
	label = "copy"; compatible = "zmk,behavior-macro"; #binding-cells = <0>;
	bindings
		= <&macro_press &kp LCTRL>
		, <&macro_tap &kp C>
		, <&macro_release &kp LCTRL>
		;
	};

	tcopy: tcopy {
	label = "tcopy"; compatible = "zmk,behavior-macro"; #binding-cells = <0>;
	bindings
		= <&macro_press &kp LCTRL>
		, <&macro_press &kp LSHIFT>
		, <&macro_tap &kp C>
		, <&macro_release &kp LCTRL>
		, <&macro_release &kp LSHIFT>
		;
	};

	paste: paste {
	label = "paste"; compatible = "zmk,behavior-macro"; #binding-cells = <0>;
	bindings
		= <&macro_press &kp LCTRL>
		, <&macro_tap &kp V>
		, <&macro_release &kp LCTRL>
		;
	};

	tpaste: tpaste {
	label = "tpaste"; compatible = "zmk,behavior-macro"; #binding-cells = <0>;
	bindings
		= <&macro_press &kp LCTRL>
		, <&macro_press &kp LSHIFT>
		, <&macro_tap &kp V>
		, <&macro_release &kp LCTRL>
		, <&macro_release &kp LSHIFT>
		;
	};

};

keymap {
	compatible = "zmk,keymap";

	default_layer {
// def
// -------------------------------------------------------------     --------------------------------------------------------------
//           |    Q    |    W    |    F    |    P    |    B    |     |    J    |    L    |    U    |    Y    |   BSPC  |
// |   ESC   |    A    |    R    |    S    |    T    |    G    |     |    M    |    N    |    E    |    I    |    O    | RETURN |
//           |    X    |    C    |    D    |    V    |    Z    |     |    K    |    H    |    AO   |    AE   |    OE   |
//                                         |   NUM   |   SYM   |     |  SPACE  |   NAV   |
    bindings = <
              &kp Q     &kp W     &kp F     &kp P     &kp B           &kp J     &kp L     &kp U     &kp Y     &kp BSPC
  &kp ESC &hr LGUI A &hr LCTRL R &hr LALT S &hr LSHIFT T &kp G        &kp M &hr RSHIFT N &hr RALT E &hr RCTRL I &hr RGUI O &kp RET
              &kp X     &kp C     &kp D     &kp V     &kp Z           &kp K     &kp H     &kp INT1  &kp INT2  &kp INT3
                                        &sl NUM       &sl SYM         &kp SPACE &sl NAV
    >;
  };

        symbol_layer {
// sym
// -------------------------------------------------------------     --------------------------------------------------------------
//           |    ^    |    $    |    #    |    !    |         |     |         |    ?    |    [    |    ]    |    \    |
// |   DEF   |    &    |    @    |    :    |    _    |         |     |    `    |    '    |    (    |    )    |    |    |  RETURN   |
//           |    <    |    >    |    ;    |         |         |     |         |    "    |    {    |    }    |    ~    |
//                                         |   NUM   |  SYM    |     |  SPACE  |   NAV   |
            bindings = <
              &kp CARET &kp DLLR  &kp HASH  &kp EXCL  &none           &none     &kp QMARK &kp LBKT  &kp RBKT  &kp BSLH
   &sl DEF    &kp AMPS  &kp AT    &kp COLON &kp UNDER &none           &kp GRAVE &kp APOS  &kp LPAR  &kp RPAR  &kp PIPE  &kp RET
              &kp LT    &kp GT    &kp SEMI  &none     &none           &none     &kp DQT   &kp LBRC  &kp RBRC  &kp TILDE
                                            &sl NUM   &sl SYM         &kp SPACE &sl NAV
            >;
        };

        numeric_layer {
// num
// -------------------------------------------------------------     --------------------------------------------------------------
//           |  cut    |         |    /    |    *    |         |     |         |    7    |    8    |    9    |         |
// |   DEF   |  copy   |  paste  |    +    |    -    |         |     |         |    4    |    5    |    6    |         |  RETURN   |
//           |  tcopy  |  tpaste |    %    |    =    |         |     |         |    1    |    2    |    3    |         |
//                                         |   NUM   |   SYM   |     |  SPACE  |    0    |
            bindings = <
              &cut      &none     &kp FSLH  &kp STAR  &none           &none     &kp N7    &kp N8    &kp N9    &none
   &sl DEF    &copy     &paste    &kp PLUS  &kp MINUS &none           &none     &kp N4    &kp N5    &kp N6    &none     &kp RET
              &tcopy    &tpaste   &kp PRCNT &kp EQUAL &none           &none     &kp N1    &kp N2    &kp N3    &none
                                            &sl NUM   &sl SYM         &kp SPACE &kp N0
            >;
        };

        navigation_layer {

// nav
// -------------------------------------------------------------     --------------------------------------------------------------
//           |   BT 1  |   BT 2  |   BT 3  |   BT 4  |   BT 5  |     |  HOME   |  PGDN   |   PGUP  |  END    |   DEL   |
// |   DEF   |         |   MUTE  |  VOLUP  | VOLDOWN |         |     |  LEFT   |  DOWN   |    UP   |  RIGHT  |   TAB   |  RETURN   |
//           | BT CLR  |         |  BRIUP  | BRIDOWN |         |     |         |         |    .    |    ,    |    /    |
//                                         |   NUM   |   SYM   |     |  SPACE  |  NAV    |
            bindings = <
     &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &kp HOME  &kp PG_DN &kp PG_UP &kp END    &kp DEL
   &sl DEF    &none &kp C_MUTE &kp C_VOL_UP &kp C_VOL_DN &none        &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &kp TAB  &kp RET
              &bt BT_CLR &none &kp C_BRI_UP &kp C_BRI_DN &none        &none     &none     &kp DOT   &kp COMMA  &kp FSLH
                                            &sl NUM   &sl SYM         &kp SPACE &sl NAV
            >;

        };
    };
};
